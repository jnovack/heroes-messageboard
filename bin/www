#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('heroes-messageboard:server');
var http = require('http');
var fs = require('fs');
var util = require('util');

/**
 * Get port from environment and store in Express.
 */

var json = loadConfig();

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Socket.IO
 */

var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log('a user connected');

  socket.on('join', function(room) {
    if (socket.room) {
      console.log("a user left " + socket.room);
      socket.leave(socket.room);
    }
    socket.join(room);
    socket.room = room;
    console.log("a user joined " + room);
    socket.emit('joined', room);
  });

  // TODO - Broadcast on join
  // for (var event in json) {
  //   console.log("sending " + event);
  //   console.log(json[event]);
  //   socket.emit("value", json[event]);
  // }

  socket.on('broadcast', function(message) {
    console.dir(socket.room + " -- " + util.inspect(message, { depth: 2 }) );
    // TODO - Save states
    // if (message.event != "reload") {
    //     json[message.data.id] = message.data;
    //     saveConfig();
    // }
    io.sockets.in(socket.room).emit(message.event, message.data);
  });
});


/**
 * Config Save/Load
 */

function saveConfig() {
   fs.writeFile('./config.json', JSON.stringify(json), function (err) {
    if (err) {
      console.log('There has been an error saving your configuration data.');
      console.log(err.message);
      return;
    }
    console.log('configuration saved successfully...');
  });
}

function loadConfig() {
  var json = {};

  try {
    var data = fs.readFileSync('./config.json');
    console.log("config.json loaded successfully...");
  }
  catch (e) {
    console.log("config.json does not exist...");
    data = null;
  }

  if (data != null) {
    try {
      json = JSON.parse(data);
      console.log("config.json parsed successfully...");
      console.dir(json);
    }
    catch (e) {
      json = {}; // Clear the variable
      console.log('There has been an error parsing your JSON. The following data will NOT be used.');
      console.log(json);
      console.log(e);
    }
  }

  return json;
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
