#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('heroes-messageboard:server');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var json = loadConfig();

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Socket.IO
 */

var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log('a user connected');
  for (var event in json) {
    console.log("sending " + event);
    console.log(json[event]);
    socket.emit(event, json[event]);
  }

  socket.on('broadcast', function(message) {
    console.log(message);
    if (message.event != "reload") {
        json[message.event] = message.data;
        saveConfig();
    }
    io.sockets.emit(message.event, message.data);
  });
});


/**
 * Config Save/Load
 */

function saveConfig() {
   fs.writeFile('./config.json', JSON.stringify(json), function (err) {
    if (err) {
      console.log('There has been an error saving your configuration data.');
      console.log(err.message);
      return;
    }
    console.log('Configuration saved successfully.')
  });
}

function loadConfig() {
  fs.readFile('./config.json', function (err, data) {
    if (err) {
      console.log("config.json does not exist");
      data = {};
    }
    var json;

    try {
      json = JSON.parse(data);
      console.dir(json);
    }
    catch (err) {
      console.log('There has been an error parsing your JSON. The following data will NOT be used.');
      console.log(json);
      console.log(err);
      json = {};
    }
    return json;
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
